package routers

import (
	"SRelay/controllers"

	"github.com/astaxie/beego"
)

func init() {
	beego.Router("/", &controllers.MainController{})

	// /login
	// /

	// 开通的时候一定要提前声明类型

	// 中继提供页面的登陆注册功能，用于申请token，token中带有时间，同时一个token对应一个端口，用户申请的时候，返回给用户token
	// 用户名和密码可以用来修改token的值，以及添加token的白名单等等
	// 关于白名单的操作在页面上操作，页面登陆的时候，使用cookie暂时保存用户的数据，cookie带有过期时间，就是一个临时的jwt
	// 页面注册的时候，用户设置一个客户和中继都知道的密码，然后，每次发送消息的时候带上token以及token和密码
	// 用户对发送的

	// /login 登陆注册，并申请token

	// 多客户端连接，如果数据中包含其他客户端的一个地址，那么，就直接发送给其他的客户端，如果不包含，那么就直接发送给当前的客户端，数据结构
	// {prefix:[string],ids:[string],data:""}

	// 连接并不频繁，所以，只是在连接的时候进行判断
	// 同一个端口之间近么进行通信呢？同一个端口有很多客户端，客户端之间进行，
	// 用户申请的时候，一个token对应一个端口，用户自己设置连接的客户端数量
	// 客户端连接的时候需要带上token，
	// post /clients?token=ssss111123456789098765
	// 客户端通过中继的通行证，然后申请一个端口以便访问，服务端检测端口的使用情况，以及服务器的使用情况，客户端把所有的状态数据保存起来

	// get /client/name
	// 长时间不通信的情况下就停止客户端的连接,维持一个心跳,让长链接的客户端维持一个心跳，以便遍检测客户端是否还需要连接
}

func TcpTask() {

}
